
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title><%= htmlWebpackPlugin.options.title %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/themes/prism.min.css" />
    <style>
      body {
        margin: 0 auto;
        width: 1000px;
      }
      pre[class*=language] {
        background: white;
        padding: 0;
      }
      .row {
        display: flex;
        justify-content: space-between;
      }
      .row--code {
        display: flex;
        justify-content: flex-start;
      }
      .border-sides {
        padding-left: 18px;
        border-left: 1px solid #aaa;
        border-right: 1px solid #aaa;
      }
      .border-right {
        margin-right: 20px;
        padding-right: 20px;
        border-right: 1px solid #aaa;
      }
    </style>
  </head>
  <body>
    <h2>Explaining monads via a series of tubes</h2>
    <p>
      Let's provide some motivation for working with monads, i.e. flatMappable structures. We will explore different ways to add logging to a function in JavaScript
      (augmented with Flow type annotations), ultimately arriving at a flatMap approach. We will first visualize our functions as a pipe that takes in an input and
      returns an output. We will then manually add our extra behavior using <code>console.log</code>. We will then use a decorator function to perform the same modification
      automatically. We will then explore further implementations without using <code>console.log</code>. We will first use <code>map</code> and define a functor. We will
      then use <code>flatMap</code> and define a monad. Finally we will refactor our <code>flatMap</code> implementation into idiomatic JavaScript.

    <h3>Initial functions</h3>
    <p>
      Let's examine a few initial functions: <code>double</code>, <code>addOne</code>, and <code>ceiling</code>. We will be exploring ways of modifying these
      functions while keeping their essence intact. For simplicity, all our functions take in a number as input and return a number as output. This allows us
      to combine our functions together in any order we want.
    </p>
    <div class="row">
      <div>
        <div id="double">
            double
      5 -> ======== -> 10
        </div>
        <pre><code class="language-flow">function double(x: number): number {
  return x * 2;
}</code></pre>
        <p><code>double</code> doubles its input.</p>
      </div>
      <div class="border-sides">
        <div id="add-one">
        addOne
    6 -> ======== -> 7
        </div>
        <pre><code class="language-flow">function addOne(x: number): number {
  return x + 1;
}</code></pre>
        <p><code>addOne</code> adds one to its input.</p>
      </div>
      <div>
        <div id="ceiling">
            ceiling
    10.5 -> ========= -> 11
        </div>
        <pre><code class="language-flow">function ceiling(x: number): number {
  return Math.ceil(x);
}</code></pre>
        <p><code>ceiling</code> rounds its input to the next highest integer.</p>
      </div>
    </div>
    <h3>Using our functions</h3>
    <p>Here are a few ways we can compose the functions <code>double</code>, <code>addOne</code>, and <code>ceiling</code>.

    <div id="compose-normal-1">
        double              ceiling            addOne
5.2 -> ======== -> 10.4 -> ========= -> 11 -> ======== -> 12
    </div>
    <pre><code class="language-flow">addOne(ceiling(double(5.2))) // => 12</code></pre>

    <div id="compose-normal-2">
        addOne             double              ceiling
5.2 -> ======== -> 6.2 -> ======== -> 12.4 -> ========= -> 13
    </div>
    <pre><code class="language-flow">ceiling(double(addOne(5.2))) // => 13</code></pre>

    <div id="compose-normal-3">
        double              addOne              double               ceiling
5.2 -> ======== -> 10.4 -> ======== -> 11.4 -> ========= -> 22.8 -> ========= -> 23
    </div>
    <pre><code class="language-flow">ceiling(double(addOne(double(5.2)))) // => 23</code></pre>
    <p>Because all inputs and outputs are compatible with each other, we can combine our functions in any order.</p>

    <h3>How can we trace function calls?</h3>
    <p>
      What if we want to know when these functions are called? For example, what if we're exploring a code base, and are
      trying to determine the order in which functions are being executed? We could figure this out by reading through source code, but it's
      very easy to get lost as we come across conditionals and jump through multiple files. Another approach is to modify our functions to
      log their name before returning their value. Then we can scan through our logs to see the order in which our functions are being called.
    </p>

    <h3>A manual approach</h3>
    <p>
      One way we can add function call tracing is to manually modify our functions.
    </p>

    <div class="row">
    <div>
      <div id="double-altered">
          double
  5.2 -> ===-==== 10.4
            |
            V
        double was called
      </div>
      <pre><code class="language-flow">function double(x: number): number {
  console.log("double was called")
  return x * 2;
}</code></pre>
    </div>

    <div class="border-sides">
      <div id="add-one-altered">
          addOne
  5.2 -> ===-==== 6.2
            |
            V
        addOne was called
      </div>
      <pre><code class="language-flow">function addOne(x: number): number {
  console.log("addOne was called")
  return x + 1;
}</code></pre>
    </div>

    <div>
      <div id="ceiling-incorrectly-altered">
          ceiling
  5.2 -> ===-===== 6
            |
            V
        addOne was called
      </div>
      <pre><code class="language-flow">function ceiling(x: number): number {
  console.log("addOne was called")
  return Math.ceil(x);
}</code></pre>
    </div>
    </div>
    <p>
      Here we've manually added a <code>console.log</code> statement to each one of our original functions. Simply adding <code>console.log</code> does not
      affect the return value of our functions. Because inputs and outputs are not affected, we can compose our new functions as we did our
      old ones.
    </p>
    <div id="compose-altered"></div>
    <pre><code class="language-flow">addOne(ceiling(double(5.2))) // => 12</code></pre>
    <p>
      However, manually modifying each function is quite tedious and error prone. In fact, our new <code>ceiling</code> has a bug.
      Rather than logging "ceiling called", it logs "addOne called." This type of copy paste bug can be quite easy to miss. Can we devise a less
      labor intensive, less error prone approach?
    </p>
    <h3>Using a decorator</h3>
    <p>
      Let's build some infrastructure that will allow us to automatically modify our functions. We will create a decorator function to do the work for us.
      As a quick refresher, a decorator function (commonly seen when doing Aspect Oriented Programming) takes a function as input and returns a new function as output. When this new function is called, it will
      execute some predefined behavior (in our case it will log out the original function's name) and then return the result of calling the original function.
    </p>
    <p>
      Let's define a decorator called <code>logName</code>. Our <code>logName</code> decorator will take a function in the shape of <code>double</code>, <code>addOne</code>,
      or <code>ceiling</code> as input. It will return a new function i.e. <code>double’</code>, <code>addOne’</code>, or <code>ceiling’</code>. This returned function will
      log the original function's name before returning the newly computed value. In order to retrieve the original function's name, we will be using the
      function's <code>name</code> property to dynamically determine the correct name to log out.
    </p>
    <p>
      As an aside, <code>double’</code>, <code>addOne’</code>, and <code>ceiling’</code> are not valid JavaScript names. Single quotes are not allowed within function names.
      Let's ignore this -- we use the single quote to denote that our original function has been altered.
    </p>
    <div id="double-decorated"></div>
    <pre><code class="language-flow">function logName(fn: (number) => number) {
  return function(x: number) {
    <%= "console.log(`${f.name} was called`);" %>
    return f(x);
  }
}</code></pre>
    <p>Let's use <code>logName</code> to define <code>double’</code>:
    <pre><code class="language-flow">const double’ = logName(double);
double’(3)         // => 6
// or we can immediately invoke our new function:
logName(double)(3) // => 6</code></pre>
    <p>
      Here we see that we've generated a new function <code>double’</code> based on our existing <code>double</code>. A <code>double</code> function goes
      in to the decorator, and a new function <code>double’</code> comes out of the decorator. Both functions double their input, but the new <code>double’</code>
      differs from the original <code>double</code> because it logs out "double called" prior to returning its result. The original <code>double</code> does not.
      Because both functions take in numbers as input, and return the doubled number as output, we can use the new <code>double’</code> exactly
      as we use the original <code>double</code>.
    </p>
    <p>Let's generate modified functions for <code>addOne</code>, and <code>ceiling</code> as well.

    <div class="row--code">
      <div class="border-right">
        <div id="add-one-decorated" style="width: 436px"></div>
        <pre><code class="language-flow">const addOne’ = logName(addOne)
addOne’(11) // => 12</code></pre>
      </div>
      <div>
      <div id="ceiling-decorated" style="width: 436px"></div>
        <pre><code class="language-flow">const ceiling’ = logName(ceiling)
ceiling’(11.1) // => 12</code></pre>
      </div>
    </div>
    <p>We can compose our new functions as we did our old functions.</p>

    <pre><code class="language-flow">ceiling’(double’(addOne’(5.2))) // => 13</code></pre>
    <div id="compose-decorated"></div>
    <p>
      Moreover, because this modification process was automatic, we've fixed the original copy paste bug. Our modified <code>ceiling’</code> function correctly
      logs the original <code>ceiling</code>'s name instead of logging out <code>addOne</code>'s name.
    </p>
    <h3>Without side effects</h3>
    <p>
      Introducing a side effect, i.e. interacting with the outside world, is a quick and easy way to tack additional behavior on to a function. Our previous implementations
      use <code>console.log</code>, a side effect, to tell the world that a function was called. One limitation of this approach is that once we log our function call
      we can no longer directly interact with that data. For example, how can we find the most commonly used function? We would have to dig into our logs
      to tally up total counts.
    </p>
    <p>
      Instead of using a side effect, we can incorporate relevant information directly into the return value. For example, we can represent our function call history as a
      list of strings. Then instead of returning a number directly, our functions can instead return that number and the history of function calls side by side. This
      approach has the benefit of making our function call history immediately consumable. For example, finding the most commonly used function is as simple as
      finding the most frequently appearing string in a list of strings.
    </p>
    <p>
      However, modifying a function's return type is a very heavy handed approach. Our existing functions only know how to consume numbers. They do not know how to
      handle any extra information. If we want our functions to remain compatible with each other, we will need to modify all of them to handle this extra data.
    </p>
    <p>For example, here we modify <code>double</code> to return extra information, but do not modify <code>addOne</code> to accept extra information:</p>
    <div id="double-modified-add-one-not"></div>
    <p>
      As we can see, <code>addOne</code> does not know what to do with <code>double</code>'s output, and so the program crashes. This shows us that modifying return values
      have a much higher initial cost than simply using <code>console.log</code>. Where before we were free to mix and match logged and unlogged functions,
      we now can only use one or the other. Nevertheless, let's continue down this path.
    </p>
    <p>
      Let's start by defining our enhanced return value. Let's call it <code>Log</code>. <code>Log</code> will have two properties -- <code>value</code>, a number, and
      <code>history</code>, a list of strings. These strings will represent all function names that have been called up to the current point.
    </p>
    <div class="row--code">
      <div class="border-right">
        <p>
          Here is the definition of our <code>Log</code> type:
        </p>
        <pre><code class="language-flow">type Log = {
  value: number,
  history: string[],
};</code></pre>
      </div>
      <div>
        <p>Here is an instance of a <code>Log</code> object:</p>
        <pre><code class="language-flow">{
  value: 30,
  history: [
    "double called",
    "ceiling called",
    "addOne called",
  ],
}</code></pre>
      </div>
    </div>
    <p>
      The above sample <code>Log</code> object has a current value of 30. Moreover our log tells us that it first passed through our <code>double</code> function. Afterwards,
      it passed through <code>ceiling</code>, and finally <code>addOne</code>. Based on that, here is one possible way to generate this log:
    </p>
    <div id="compose-lifted"></div>
    <pre><code class="language-flow">addOne(ceiling(double(buildLog(14.1)))) // => 30, ["double called", "ceiling called", "addOne called"]</code></pre>
    <p>
      From the above diagram, we see that we've modified our functions to accept <code>Log</code> objects as inputs and return
      <code>Log</code> objects as outputs. Moreover, we kick things off by wrapping our original number in an initial <code>Log</code> object.
      This inaugural wrapping allows us to start using our <code>Log</code> enhanced functions.
    </p>
    <p>
      Here is a utility function that generates our initial <code>Log</code> object:
    </p>
    <div class="row--code">
      <div class="border-right">
        <pre><code class="language-flow">function buildLog(value: number): Log {
  return {
    value: value,
    history: [],
  };
}</code></pre>
      </div>
      <div id="build-log"></div>
    </div>
    <p>
      We insert our given number into the <code>Log</code> object we generate. Because no relevant functions have been called yet, we initialize
      <code>history</code> to an empty array. This fresh <code>Log</code> object will be the starting point to interact with our other functions.
    </p>
    <p>Now we must figure out how to modify our functions to accept and return logs.</p>
    <h3>A manual approach</h3>
    <p>Let's start with the manual approach.</p>
    <div class="row--code">
    <div class="border-right">
    <pre><code class="language-flow">function double(log: Log): Log {
  const { value, history } = log;
  const doubled = value * 2;
  const newHistory = history.concat(["double called"]);
  return {
    value: doubled,
    history: newHistory,
  };
}</code></pre>
    </div>
    <div id="double-manually-lifted" style="width: 440px"></div>
    </div>
    <pre><code class="language-flow">double({ value: 3, history: ["cheese"] }) // => { value: 6, history: ["cheese", "double called"] }</code></pre>
    <p>
      Here we see our enhanced <code>double</code> function. Rather than dealing with <code>number</code> inputs and outputs, it deals with <code>Log</code> inputs
      and outputs. As a result, it can no longer interact with <code>addOne</code> or <code>ceiling</code>.
    </p>
    <div id="double-modified-add-one-not-2"></div>
    <p>
      Let's modify <code>addOne</code>, and
      <code>ceiling</code> to handle <code>Log</code>s as well.
    </p>
    <div class="row--code">
      <div class="border-right">
        <div id="add-one-manually-lifted"></div>
        <pre><code class="language-flow">function addOne(log: Log): Log {
  const { value, history } = log;
  const plusOne = value + 1;
  const newHistory = history.concat(["addOne called"]);
  return {
    value: plusOne,
    history: newHistory,
  };
}

addOne({ value: 4, history: [] })
  // => { value: 5, history: ["addOne called"] }</code></pre>
      </div>
      <div>
        <div id="ceiling-manually-lifted"></div>
        <pre><code class="language-flow">function ceiling(log: Log): Log {
  const { value, history } = log;
  const ceiling = Math.ceil(value);
  const newHistory = history.concat(["ceiling called"]);
  return {
    value: ceiling,
    history: newHistory,
  };
}

ceiling({ value: 3.5, history: ["fondue"] })
  // => { value: 4, history: ["fondue", "ceiling called"] }</code></pre>
      </div>
    </div>
    <p>
      Because all our functions now expect <code>Log</code> objects as inputs and return <code>Log</code> objects as outputs, we can
      compose them however we'd like. This is similar to our original functions that took numbers as inputs and returned numbers as
      outputs. However, rather then tracking function calls via <code>console.log</code>, we now track function calls via <code>Log</code>
      return values.
    </p>
    <pre><code class="language-flow">double(addOne(ceiling(double(buildLog(5.2))))) // => 24, ["double", "ceiling", "addOne", "double"]</code></pre>
    <p>
      There are a few drawbacks with our manual implementation. Much like when we manually added <code>console.log</code>s to our original functions,
      this process is very repetitive. Moreover, there is a lot more code than simply logging a string to the console. Handling <code>Log</code>
      objects involved the following five steps:
    </p>
    <ol>
      <li>extract the existing value and history from our <code>Log</code> object</li>
      <li>perform the actual computation</li>
      <li>generate some new history</li>
      <li>combine the new history with the old history</li>
      <li>return the new <code>Log</code> object</li>
    </ol>
    <p>
      The only unique feature across <code>double</code>, <code>addOne</code>, and <code>ceiling</code> is the second step of performing
      the actual computation. All other steps are more or less the same. This suggests that we can create a decorator function
      to abstract away much of the repetition.
    </p>
    <h3>Using the map decorator</h3>
    <p>
      Much like our <code>traceCall</code> decorator added appropriate <code>console.log</code> statements to an initial function, our new
      <code>map</code> decorator will enhance an initial function to accept and return <code>Log</code> objects. It will achieve this by
      abstracting out the following steps as seen in the manual modification process:
    </p>
    <ol>
      <li>extract the existing value and history from an inputted <code>Log</code> object</li>
      <li>use the given function to perform some computation</li>
      <li>generate some new history</li>
      <li>combine the new history with the old history</li>
      <li>return the new <code>Log</code> object</li>
    </ol>
    <p>
      Here are the above steps translated into code form.
    </p>
    <div class="row--code">
    <div class="border-right">
      <pre><code class="language-flow">function map(fn: (x: number) => number) {
  return function(log: Log): Log {
    const { value, history } = log;
    const newValue = fn(value);
    <%= "const newHistory = [`${fn.name} called`];" %>
    return {
      value: newValue,
      history: history.concat(newHistory),
    };
  }
}</code></pre>
    </div>
      <div id="map-decorate-fn-1" style="width: 500px"></div>
    </div>
    <p>
      Notice how similar this <code>map</code> implementation is to our manually modified functions. Here is how we can use it to generate
      <code>double’</code>, <code>addOne’</code>, and <code>ceiling’</code> dopplegangers based on our original <code>double</code>, <code>addOne</code>, and
      <code>ceiling</code> functions.
    </p>
    <div class="row--code">
    <div class="border-right">
      <pre><code class="language-flow">const double’ = map(double);
const addOne’ = map(addOne);
const ceiling’ = map(ceiling);</code></pre>
    </div>
    <div style="width: 500px">
      <div id="map-decorate-double"></div>
      <div id="map-decorate-add-one"></div>
      <div id="map-decorate-ceiling"></div>
    </div>
    </div>
    <p>
      Usage of our newly generated functions is exactly the same as when we manually made them.
    </p>
    <pre><code class="language-flow">double’(addOne’(ceiling’(double’(buildLog(5.2))))) // => 24, ["double", "ceiling", "addOne", "double"]</code></pre>
    <p>
      What have we accomplished by defining <code>map</code>? We have created a mechanism where given a function that takes numbers to numbers,
      we can now generate a very similar function that takes <code>Log</code>s to <em>Log</em>s.
    </p>
    <p>
      At this point one might wonder why we've named our decorator <code>map</code>. We'll soon see that our <code>map</code> decorator
      very similar to lodash's <code>map</code> function. Let's take a look at lodash's <code>map</code>'s type signature:
    </p>
    <pre><code class="language-flow">function lodashMap&lt;U, V&gt;(collection: Array&lt;U&gt;, fn: (u: U) => V): Array&lt;V&gt;</code></pre>
    <p>
      In comparison, here are more generic versions of our <code>map</code> and <code>Log</code>:
    </p>
    <div class="row--code">
    <div class="border-right">
      <pre><code class="language-flow">function map&lt;U, V&gt;(fn: (u: U) => V): (Log&lt;U&gt;) => Log&lt;V&gt;</code></pre>
    </div>
    <div>
      <pre><code class="language-flow">type Log&lt;T&gt; = {
  value: T,
  history: string[],
};</code></pre>
    </div>
    </div>
    <p>
      Our <code>map</code>'s type signature is the curried form of the following signature for <code>map</code> -- we can easily
      rewrite <code>map</code> to take on the following uncurried form:
    </p>
    <pre><code class="language-flow">function map&lt;U, V&gt;(fn: (u: U) => V, log: Log&lt;U&gt;): Log&lt;V&gt;</code></pre>
    <p>
      On the left is our curried <code>map</code> as originally defined, and on the right is our new, equivalent, uncurried <code>map</code>:
    </p>
    <div class="row--code">
      <div class="border-right">
        <pre><code class="language-flow">function map(fn: (x: number) => number) {
  return function(log: Log): Log {
    const { value, history } = log;
    const newValue = fn(value);
    <%= "const newHistory = [`${fn.name} called`];" %>
    return {
      value: newValue,
      history: history.concat(newHistory),
    };
  }
}</code></pre>
      </div>
      <div>
        <pre><code class="language-flow">function map(fn: (x: number) => number, log: Log) {
  const { value, history } = log;
  const newValue = fn(value);
  <%= "const newHistory = [`${fn.name} called`];" %>
  return {
    value: newValue,
    history: history.concat(newHistory),
  };
}</code></pre>
      </div>
    </div>
      Now let's compare our uncurried <code>map</code> with <codeem>lodash</code>'s <code>map</code>.
    </p>
    <pre><code class="language-flow">function lodashMap&lt;U, V&gt;(collection: Array&lt;U&gt;, fn: (u: U) => V): Array&lt;V&gt;
function       map&lt;U, V&gt;(fn: (u: U) => V,          log: Log&lt;U&gt;): Log&lt;V&gt;</code></pre>
    <p>
      Here we see two differences in function shapes. A minor difference is that the order of arguments are reversed -- lodash expects the array
      to be passed in first, whereas we expect the function to be passed in first. The second, more interesting difference is that while our <code>map</code>
      operates on <code>Log</code> objects, <code>lodash</code>'s <code>map</code> operates on <code>Array</code>s. These are
      very different data structures, but their respective <code>map</code>s conceptually do very similar things.
    </p>
    <h3>A functor is a mappable structure</h3>
    <p>
      The similarity between our <code>Log</code>'s <code>map</code> and an array's <code>map</code> is not an isolated occurrence. There are many more
      structures such as <code>Promise</code> and <code>Maybe</code> that can have very similar <code>map</code> functions defined for them. Collectively,
      if these mappable structures obey certain other laws, they are known as functors. Here is a definition of a functor:
    </p>
    <p>
      A functor contains two components:
      <ul>
        <li>
          A structure that wraps a value or values
          <pre><code class="language-flow">type Functor&lt;T&gt;</code></pre>
        </li>
        <li>
          A <code>map</code> function in the shape of:
          <pre><code class="language-flow">map: &lt;U, V&gt;(fn: (u: U) => V, f: Functor&lt;U&gt;) => Functor&lt;V&gt;;</code></pre>
        </li>
      </ul>
    </p>
    <p>Moreover, a functor should obey the following laws:</p>
      <ul>
        <li>
          <div class="row--code">
            <div class="border-right">
              Identity law
              <pre><code class="language-flow">map(identity, functor) &#65309; identity(functor)</code></pre>
            </div>
            <div>
              where <code>identity</code> is a function that directly returns its argument:
              <pre><code class="language-flow">function identity&lt;T&gt;(x: T): T {
  return x;
}</code></pre>
            </div>
          </div>
        </li>
        <li>
          Composition law
          <pre><code class="language-flow">map((x) => f(g(x)), functor) &#65309; map(f, map(g, functor))</code></pre>
        </li>
      </ul>
    </p>
    <p>
      Here we hit a minor roadblock. Our <code>map</code> does not obey the functor laws! Namely, our log's
      <code>history</code> property obeys neither the identity law nor the composition law. Let's show an example:
    </p>
    <p>The identity law does not hold:</p>
    <pre><code class="language-flow">// left hand side of identity law
map(identity, buildLog(1)) // => { value: 1, history: ["identity called"] }

// right hand side of identity law
identity(buildLog(1))      // => { value: 1, history: [] }</code></pre>
    <p>The composition law does not hold:</p>
    <pre><code class="language-flow">const f = (x) => x + 1;
const g = (x) => x + 2;
const gThenF = (x) => f(g(x));

// left hand side of composition law
map(gThenF, buildLog(1))    // { value: 4, history: [ 'gThenF called' ] }

// right hand side of composition law
map(f, map(g, buildLog(1))) // { value: 4, history: [ 'g called', 'f called' ] }</code></pre>
    <p>Let's define a new <code>map</code> that does satisfy the functor laws:</p>
    <pre><code class="language-flow">function map&lt;U, V&gt; (fn: (u: U) => V, log: Log&lt;U&gt;): Log&lt;V&gt; {
  const { value, history } = log;
  const newValue = fn(value);
  // instead of generating new history, we add nothing
  const newHistory = [];

  return {
    value: newValue,
    history: history.concat(newHistory),
  };
}</code></pre>
    <p>Now we see that the identity and composition laws both hold:</p>
    <pre><code class="language-flow">// left hand side of identity law
map(identity, buildLog(1))  // => { value: 1, history: [] }

// right hand side of identity law
identity(buildLog(1))       // => { value: 1, history: [] }

// left hand side of composition law
map(gThenF, buildLog(1))    // { value: 4, history: [] }

// right hand side of composition law
map(f, map(g, buildLog(1))) // { value: 4, history: [] }</code></pre>
    <p>
      The good news -- our <code>Log</code> and <code>map</code> now form a well behaved functor! The bad news -- we are no longer
      tracing function calls. How can we fix this?
    </p>
    <h3>Decomposing map into two stages</h3>
    <div id="map-decorate-fn-2"></div>
    <div id="map-decomposed"></div>
    <p>
      Upon closer examination, our original, improperly defined <code>map</code> did two conceptually separate things.
    </p>
    <ol>
      <li>
        Create a new <code>Log</code> object based on an existing <code>Log</code> object and a given function.
      </li>
      <li>
        Glue together the new <code>Log</code> with the old <code>Log</code>
      </li>
    </ol>
    <pre><code class="language-flow">function map&lt;U, V&gt; (fn: (u: U) => V, log: Log&lt;U&gt;) {
  // stage 1: create a new Log object based on an existing log object and function fn
  const { value, history } = log;
  const newValue = fn(value);
  <%= "const newHistory = [`${fn.name} called`];" %>

  // stage 2: glue together the new Log with the old Log
  return {
    value: newValue,
    history: history.concat(newHistory),
  };
}</code></pre>
    <p>Our new, properly defined <code>map</code> also follows these two stages</p>
    <pre><code class="language-flow">function map&lt;U, V&gt; (fn: (u: U) => V, log: Log&lt;U&gt;) {
  // stage 1: create a new Log object based on an existing log object and function fn
  const { value, history } = log;
  const newValue = fn(value);
  const newHistory = [];

  // stage 2: glue together the new Log with the old Log
  return {
    value: newValue,
    history: history.concat(newHistory),
  };
}
</code></pre>
  <p>
    As we can see, the second stage of both <code>map</code> functions are identical. Based on this, let's extract stages 1 and 2 into their own separate
    functions. We will then combine these stages to recreate our <code>map</code> functions.
  </p>
  <h3>Defining flatMap</h3>
  <p>
    First, we will create a decorator function, <code>logName</code>, to encompass stage 1's logic. It will take a function in the shape of
    <code>(x: number) => number</code>, and tranform it into a function in the shape of <code>(x: number) => Log</code>.
  </p>
  <div class="row--code">
  <div class="border-right">
  <pre><code class="language-flow">// stage 1: create a decorator that converts a normal function
// into one that returns a Log object
function logName(fn: (x: number) => number) {
  return function(x: number): Log {
    return {
      value: fn(x),
      <%= "history: [`${fn.name} called`]," %>
    };
  }
}</code></pre>
  </div>
  <div id="log-name-decorator" style="width: 500px"></div>
  </div>
  <p>We can use it like this:</p>
  <pre><code class="language-flow">const double’ = logName(double);
double’(3) // => { value: 6, history: ["double called"] }</code></pre>
  <p>
    Next, we will create a decorator function <code>flatMap</code> to encompass stage 2's gluing logic. It will convert
    a function in the shape of <code>double’</code>, <code>(x: number) => Log</code>, into a function
    in the shape of <code>(log: Log) => Log</code>. Note that <code>(log: Log) => Log</code> is the same shape as the
    function returned from our original uncurried <code>map</code>.
  </p>
  <div id="flat-map-decorator"></div>
  <pre><code class="language-flow">// stage 2: glue together the new Log with the old Log
// g is in the shape of double’ -- the output of calling logName
function flatMap(g: (x: number) => Log) {
  return function(log: Log): Log {
    const { value: oldValue, history: oldHistory } = log; // extract our given Log's value and history
    const { value: newValue, history: newHistory } = g(oldValue); // get a new Log based on oldValue
    return {
      value: newValue,
      history: oldHistory.concat(newHistory), // glue together the two histories
    };
  }
}</code></pre>
  <p>
    We can use it like this:
  </p>
  <div id="flat-map-decorator-usage"></div>
  <pre><code class="language-flow">const double’ = logName(double);
const double’’ = flatMap(double’);
double’’({ value: 3, history: ["hello!" ] })
  // => { value: 6, history: ["hello!", "double called"] }</code></pre>
  <p>
    And now we finally have all the tools necessary to modify our functions to accept
    <code>Log</code>s and return <code>Log</code>s.
  </p>
  <pre><code class="language-flow">const double = (x) => x * 2;
const addOne = (x) => x + 1;
const ceiling = (x) => Math.ceil(x);

const double’ = flatMap(logName(double));
const addOne’ = flatMap(logName(addOne));
const ceiling’ = flatMap(logName(ceiling));

addOne’(ceiling’(double’(buildLog(5.2))))
  // => { value: 12, history: ["double called", "ceiling called", "addOne called" ]}</code></pre>
  <h3>A monad is a flatMappable structure</h3>
  <p>
    What have we gained by defining <code>flatMap</code>? We saw that when we modified our original <code>map</code>
    to obey the functor laws, our new functor <code>map</code> ceased to add tracing information to our <code>Log</code> objects.
    We were able regain this ability by decomposing our old <code>map</code> into two different decorator functions -- <code>logName</code>
    and <code>flatMap</code>. We saw that <code>logName</code> transforms normal functions into equivalent functions that return
    <code>Log</code> objects, and that <code>flatMap</code> takes these altered <code>Log</code> returning functions and modifies them
    to also accept <code>Log</code> objects as inputs. From this we can see that <code>flatMap</code> is a more powerful abstraction
    than <code>map</code>. It allows us keep the gluing logic constant, while varying how we choose to generate <code>Log</code> objects.
  </p>
  <p>
    We will now circle back to our functor law abiding <code>map</code>. We will reimplement it, but this time in terms of
    <code>flatMap</code> and our <code>buildLog</code> utility function. As an aside, our <code>buildLog</code> function is more generally
    known as <code>unit</code>, and it along with <code>flatMap</code> and our <code>Log</code> type are the three pieces of our
    <code>Log</code> monad.
  </p>
  <pre><code class="language-flow">function functorMap(fn: (number) => number, log: Log) {
  // assume flatMap is in its uncurried form rather than the curried form we were using above
  return flatMap(x => buildLog(fn(x)), log);
}</code></pre>
  <p>
    We can see it in action like this:
  </p>
  <pre><code class="language-flow">functorMap(x => x + 1, buildLog(3)) // => { value: 4, history: [] }</code></pre>
  <p>
    More generally, a monad contains three components subject to certain monad laws:
    <ul>
      <li>
        A structure that wraps a value or values
        <pre><code class="language-flow">type Monad&lt;T&gt;</code></pre>
      </li>
      <li>
        A <code>flatMap</code> function in the shape of
        <pre><code class="language-flow">flatMap: &lt;U, V&gt;(fn: (u: U) => Monad&lt;V&gt;, f: Monad&lt;U&gt;) => Monad&lt;V&gt;;</code></pre>
      </li>
      <li>
        A <code>unit</code> function in the shape of
        <pre><code class="language-flow">unit: &lt;T&gt;(x: T) => Monad&lt;T&gt;;</code></pre>
      </li>
    </ul>
  </p>
  <p>
    The monad laws are as follows:
    <ul>
      <li>
        Left identity law
        <pre><code class="language-flow">flatMap(f, unit(x)) &#65309; f(x)</code></pre>
      </li>
      <li>
        Right identity law
        <pre><code class="language-flow">flatMap(unit, monad) &#65309; monad</code></pre>
      </li>
      <li>
        Associativity law
        <pre><code class="language-flow">flatMap(g, flatMap(f, monad)) &#65309; flatMap(x => flatMap(g, f(x)), monad)</code></pre>
      </li>
    </ul>
  </p>
  <p>Let's see the monad laws in action. Assume we have two functions <code>f</code> and <code>g</code> as follows:</p>
  <pre><code class="language-flow">function f(x: number) {
  return {
    value: x + 2,
    history: ["+ 2"]
  }
}

function g(x: number) {
  return {
    value: x * 2,
    history: ["* 2"],
  }
}</code></pre>
  <p>We can evaluate both sides of the left identity law:</p>
  <pre><code class="language-flow">flatMap(f, unit(3)) // => { value: 5, history: ["a number was incremented by 2"] }
f(3)                // => { value: 5, history: ["a number was incremented by 2"] }</code></pre>
  <p>We can evaluate both sides of the right identity law:</p>
  <pre><code class="language-flow">flatMap(unit, { value: 2, history: ["some", "stuff"] }) // => { value: 2, history: ["some", "stuff"] }
{ value: 2, history: ["some", "stuff"] }                // => { value: 2, history: ["some", "stuff"] }</code></pre>
  <p>We can evaluate both sides of the associativity law:</p>
  <pre><code class="language-flow">flatMap(g, flatMap(f, { value: 2, history: ["some", "stuff"] }))
  // => { value: 8, history: ["some", "stuff", "+ 2", "* 2"] }
flatMap(x => flatMap(g, f(x)), { value: 2, history: ["some", "stuff" ]})
  // => { value: 8, history: ["some", "stuff", "+ 2", "* 2"] }</code></pre>
  <p>
    While this doesn't constitute a strict proof, it serves as a quick sanity check to show that our <code>Log</code> monad is not
    obviously disobeying the monad laws.
  </p>
  <h3>Idiomatic JavaScript</h3>
  <p>
    Up till now, our notation has not been very idiomatic JavaScript. For example, JavaScript's <code>Array.prototype.map</code> is defined directly
    on <code>Array</code> itself. By defining <code>map</code> on <code>Array</code>, we can chain <code>map</code> calls together. This allows us to
    read our functions in the order they execute. On the other hand, when we compose functions together, we read them inside out. For example, compare the
    following two code snippets:
  </p>
  <pre><code class="language-flow">Log.build(1)
    .flatMap(logName(double))
    .flatMap(logName(addOne))</code></pre>
  <p>and</p>
  <pre><code class="language-flow">flatMap(
  logName(addOne),
  flatMap(
    logName(double),
    buildLog(1),
  ),
)</code></pre>
  <p>The former style is much more common than the latter. Here is one possible implementation: </p>
  <pre><code class="language-flow">class Log&lt;U&gt; {
  value: U;
  history: string[];

  constructor(u: U, history: string[] = []) {
    this.value = u;
    this.history = history;
  }

  // our unit function
  static build(u: U): this {
    return new this(u);
  }

  flatMap&lt;V&gt;(fn: (u: U) => Log&lt;V&gt;): Log&lt;V&gt; {
    const { value, history } = this;
    const { value: newValue, history: newHistory } = fn(value);
    return new Log(newValue, history.concat(newHistory));
  }
}</code></pre>

  <p>And we can use it like this: </p>
  <pre><code class="language-flow">function logName&lt;U, V&gt;(fn: U => V): (U) => Log&lt;V&gt; {
  return function(u: U) {
    <%=   "return new Log(fn(u), [`${fn.name} called`]);" %>
  }
}

function double(x) { return x * 2; }
function addOne(x) { return x + 1; }

Log.build(1)
  .flatMap(logName(addOne))
  .flatMap(logName(double))
  .flatMap(x => new Log(x + 100, ["a mystery"]))
  // => Log { value: 104, history: ["addOne called", "double called", "a mystery"] }
  </code></pre>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/prism.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-flow.min.js"></script>
  </body>
</html>
