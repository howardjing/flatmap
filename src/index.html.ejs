
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <h2>The Problem</h2>

    <p>Let's say we have a bunch of functions. For simplicity's sake let's say all of our functions take in a number as input and spit out a number as output.</p>
    <pre>
      double
5 -> ======== -> 10

function double(x: number): number {
  return x * 2;
}
    </pre>

    <pre>
     addOne
6 -> ======== -> 7

function addOne(x: number): number {
  return x + 1;
}
    </pre>

    <pre>
         ceiling
10.5 -> ========= -> 11

function ceiling(x: number): number {
  return Math.ceil(x);
}
    </pre>

    <p>Because all of our functions take numbers as input and spit out numbers as output, we can arrange them any way we want:</p>

    <pre>
        double              ceiling            addOne            double
5.2 -> ======== -> 10.4 -> ========= -> 11 -> ======== -> 12 -> ======== -> 24

double(addOne(ceiling(double(5.2))))
    </pre>

    <pre>
        addOne             double              double              ceiling
5.2 -> ======== -> 6.2 -> ======== -> 12.4 -> ======== -> 24.8 -> ========= -> 25


ceiling(double(double(addOne(5.2))))
    </pre>

    <p>What if we wanted to keep a history of the names of the functions our number passes through as it journeys through our list of functions? There are many ways to do this. One way is to modify all of our functions to log out their name before returning their value.</p>

    <pre>
function double(x: number): number {
  console.log("double was called")
  return x * 2;
}

/**
        double
5.2 -> ===-==== 10.4
          |
          V
     double was called
**/
function addOne(x: number): number {
  console.log("addOne was called")
  return x + 1;
}

function ceiling(x: number): number {
  console.log("ceiling was called")
  return Math.ceil(x);
}
    </pre>
  </body>
</html>
